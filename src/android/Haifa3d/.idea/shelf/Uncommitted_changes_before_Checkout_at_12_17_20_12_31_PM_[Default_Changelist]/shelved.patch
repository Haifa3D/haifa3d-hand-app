Index: app/src/main/java/com/gjung/haifa3d/ui/presets/EditPresetFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gjung.haifa3d.ui.presets\n\nimport android.os.Bundle\nimport android.os.UserManager\nimport android.view.*\nimport androidx.core.widget.doOnTextChanged\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.activityViewModels\nimport androidx.fragment.app.viewModels\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.Transformations\nimport androidx.navigation.fragment.findNavController\nimport androidx.navigation.fragment.navArgs\nimport androidx.recyclerview.widget.DividerItemDecoration\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.gjung.haifa3d.*\n\nimport com.gjung.haifa3d.adapter.MovementsAdapter\nimport com.gjung.haifa3d.adapter.PresetsAdapter\nimport com.gjung.haifa3d.ble.IDirectExecuteService\nimport com.gjung.haifa3d.ble.IPresetService\nimport com.gjung.haifa3d.databinding.FragmentEditPresetBinding\nimport com.gjung.haifa3d.model.*\nimport com.gjung.haifa3d.util.InjectorUtils\nimport kotlinx.coroutines.*\n\n/**\n * A simple [Fragment] subclass.\n */\nclass EditPresetFragment : BleFragment(), MovementsAdapter.OnItemClickListener {\n    private lateinit var binding: FragmentEditPresetBinding\n    private var presetService: IPresetService? = null\n    private var directExecuteService: IDirectExecuteService? = null\n    private val args: EditPresetFragmentArgs by navArgs()\n    private val presetsViewModel: PresetsViewModel by activityViewModels {\n        InjectorUtils.providePresetsViewModelFactory(requireContext())\n    }\n    private lateinit var adapter: MovementsAdapter\n\n    private val preset by lazy {\n        Transformations.map(presetsViewModel.presets) { presets ->\n            presets[args.presetId]\n        }\n    }\n\n    private val movements\n        get() = preset.value!!.handAction!!.Movements\n\n    override fun onServiceConnected() {\n        presetService = bleService!!.manager.presetService\n        directExecuteService = bleService!!.manager.directExecuteService\n    }\n\n    override fun onServiceDisconnected() {\n        presetService = null\n        directExecuteService = null\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setHasOptionsMenu(true)\n    }\n\n    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\n        inflater.inflate(R.menu.edit_preset, menu)\n    }\n\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        return when (item.itemId) {\n            R.id.action_try_preset -> {\n                tryPreset()\n                true\n            }\n            R.id.action_save_hand_action -> {\n                saveHandAction()\n                true\n            }\n            R.id.action_add_hand_movement -> {\n                addHandMovement()\n                true\n            }\n            else -> super.onOptionsItemSelected(item)\n        }\n    }\n\n    private fun tryPreset() {\n        directExecuteService?.executeAction(HandAction(movements))\n    }\n\n    private fun addHandMovement() {\n        hideKeyboard(requireActivity())\n        movements.add(HandMovement(\n            TorqueStopModeDetail(TorqueStopThreshold.Low),\n            TimeStopModeDetail(20u),\n            MotorsActivated(\n                turn = true,\n                finger1 = true\n            ),\n            MotorsDirection(\n                turn = MotorDirection.Dir1,\n                finger1 = MotorDirection.Dir1\n            )\n        ))\n        adapter.notifyItemInserted(movements.size)\n        presetsViewModel.presets.notifyObserver()\n    }\n\n    private fun saveHandAction() {\n        hideKeyboard(requireActivity())\n        GlobalScope.launch(Dispatchers.IO) {\n            presetService!!.writePreset(args.presetId, HandAction(movements))\n            var name: String? = presetsViewModel.currentEditPresetName.value\n            if (name.isNullOrBlank())\n                name = null\n            var starred = presetsViewModel.currentEditPresetStarred.value ?: false\n            presetsViewModel.setPresetInfo(\n                args.presetId,\n                HandAction(movements),\n                name,\n                starred\n            )\n            withContext(Dispatchers.Main) {\n                val navController = this@EditPresetFragment.findNavController();\n                navController.navigateUp()\n            }\n        }\n    }\n\n    override fun onItemClick(movementIndex: Int, movement: HandMovement) {\n        hideKeyboard(requireActivity())\n        val act = EditPresetFragmentDirections.editMovement(args.presetId, movementIndex)\n        this.findNavController().navigate(act)\n    }\n\n    override fun onPause() {\n        hideKeyboard(requireActivity())\n        super.onPause()\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        binding = FragmentEditPresetBinding.inflate(layoutInflater, container, false)\n        setHasOptionsMenu(true)\n\n        adapter = MovementsAdapter(presetsViewModel, args.presetId)\n\n        val rec = binding.recyclerViewMovements\n        rec.adapter = adapter\n        rec.setHasFixedSize(true)\n        rec.layoutManager = LinearLayoutManager(this.requireContext())\n        rec.addItemDecoration(DividerItemDecoration(this.requireContext(), DividerItemDecoration.VERTICAL))\n\n        adapter.onItemClickListener = this\n\n        Transformations.switchMap(presetsViewModel.presetNames) { names ->\n            Transformations.map(preset) { preset ->\n                names[preset]\n            }\n        }.observe(viewLifecycleOwner, Observer {\n            if (presetsViewModel.currentEditPresetName.value.isNullOrBlank()) {\n                presetsViewModel.currentEditPresetName.postValue(it)\n            }\n        })\n\n        binding.presetNameEdit.doOnTextChanged { text, _, _, _ ->\n            val tx: String = text.toString()\n            if (presetsViewModel.currentEditPresetName.value != tx)\n                presetsViewModel.currentEditPresetName.postValue(tx)\n        }\n\n        presetsViewModel.currentEditPresetName.observe(viewLifecycleOwner, Observer {\n            if (binding.presetNameEdit.text?.toString() != it)\n                binding.presetNameEdit.setText(it)\n        })\n\n        binding.starredCheck.setOnCheckedChangeListener { _, isChecked ->\n            if (presetsViewModel.currentEditPresetStarred.value != isChecked)\n                presetsViewModel.currentEditPresetStarred.postValue(isChecked)\n        }\n\n        presetsViewModel.currentEditPresetStarred.observe(viewLifecycleOwner, Observer {\n            if (binding.starredCheck.isChecked != it)\n                binding.starredCheck.isChecked = it\n        })\n\n        return binding.root\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/gjung/haifa3d/ui/presets/EditPresetFragment.kt	(revision 819113bbbbdf9df303ccad1ebf589fb5425a62e5)
+++ app/src/main/java/com/gjung/haifa3d/ui/presets/EditPresetFragment.kt	(date 1607953637000)
@@ -1,8 +1,11 @@
 package com.gjung.haifa3d.ui.presets
 
+import android.app.Activity
+import android.widget.Toast
 import android.os.Bundle
 import android.os.UserManager
 import android.view.*
+import android.widget.TextView
 import androidx.core.widget.doOnTextChanged
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.activityViewModels
@@ -13,6 +16,7 @@
 import androidx.navigation.fragment.navArgs
 import androidx.recyclerview.widget.DividerItemDecoration
 import androidx.recyclerview.widget.LinearLayoutManager
+
 import com.gjung.haifa3d.*
 
 import com.gjung.haifa3d.adapter.MovementsAdapter
@@ -22,8 +26,31 @@
 import com.gjung.haifa3d.databinding.FragmentEditPresetBinding
 import com.gjung.haifa3d.model.*
 import com.gjung.haifa3d.util.InjectorUtils
+import kotlinx.android.synthetic.*
+import kotlinx.android.synthetic.main.nav_header_connected.*
 import kotlinx.coroutines.*
 
+
+import android.content.Intent
+import android.view.Menu
+import android.view.MenuItem
+import android.view.View
+import android.widget.PopupMenu
+import androidx.navigation.findNavController
+import androidx.navigation.ui.AppBarConfiguration
+import androidx.navigation.ui.setupActionBarWithNavController
+import androidx.navigation.ui.setupWithNavController
+import com.gjung.haifa3d.databinding.ActivityConnectedBinding
+import com.google.android.material.bottomnavigation.BottomNavigationView
+import com.gjung.haifa3d.R
+import com.google.android.material.navigation.NavigationView
+
+
+
+
+
+val n = 10
+
 /**
  * A simple [Fragment] subclass.
  */
@@ -73,9 +100,13 @@
             }
             R.id.action_save_hand_action -> {
                 saveHandAction()
+
                 true
             }
+
             R.id.action_add_hand_movement -> {
+
+
                 addHandMovement()
                 true
             }
@@ -83,11 +114,25 @@
         }
     }
 
+
+
+
+
+
+
     private fun tryPreset() {
         directExecuteService?.executeAction(HandAction(movements))
     }
 
     private fun addHandMovement() {
+
+        if(movements.size >= n){
+            Toast.makeText(getActivity(), "Limited to 10 movements!", Toast.LENGTH_SHORT).show()
+
+
+            return
+        }
+
         hideKeyboard(requireActivity())
         movements.add(HandMovement(
             TorqueStopModeDetail(TorqueStopThreshold.Low),
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = '1.4.10'\n    repositories {\n        google()\n        jcenter()\n        \n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.1.0'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n        classpath 'com.google.gms:google-services:4.3.3'\n        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.3.0'\n\n        def nav_version = \"2.3.0-beta01\"\n        classpath \"androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version\"\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n        \n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision 819113bbbbdf9df303ccad1ebf589fb5425a62e5)
+++ build.gradle	(date 1607963763000)
@@ -8,7 +8,7 @@
         
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:4.1.0'
+        classpath 'com.android.tools.build:gradle:4.1.1'
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
 
         // NOTE: Do not place your application dependencies here; they belong
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'com.google.gms.google-services'\napply plugin: 'com.google.firebase.crashlytics'\napply plugin: 'androidx.navigation.safeargs.kotlin'\napply plugin: 'kotlin-kapt'\n\nandroid {\n    compileSdkVersion 29\n    buildToolsVersion \"29.0.3\"\n\n    defaultConfig {\n        applicationId \"com.gjung.haifa3d\"\n        minSdkVersion 22\n        targetSdkVersion 29\n        versionCode(System.getenv('BUILD_ANDROIDVERSIONCODE') as Integer) ?: 1\n        versionName System.getenv('BUILD_BUILDNUMBER') ?: \"0.1-noversioninfo\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n\n        // needed since Android Gradle Plugin 4.1.0\n        // see https://stackoverflow.com/a/64333972/1200847\n        buildConfigField 'String', 'VERSION_NAME', \"\\\"${versionName}\\\"\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled true\n            shrinkResources true\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n\n    viewBinding {\n        enabled = true\n    }\n\n    compileOptions {\n        targetCompatibility JavaVersion.VERSION_1_8\n        sourceCompatibility JavaVersion.VERSION_1_8\n    }\n\n    kotlinOptions {\n        jvmTarget = \"1.8\"\n\n\n    }\n\n// To inline the bytecode built with JVM target 1.8 into\n// bytecode that is being built with JVM target 1.6. (e.g. navArgs)\n\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.2.0'\n    implementation 'androidx.core:core-ktx:1.3.1'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\n    implementation 'androidx.fragment:fragment-ktx:1.2.5'\n\n    implementation 'com.google.android.material:material:1.2.1'\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0\"\n    implementation \"androidx.activity:activity-ktx:1.1.0\"\n\n    // Brings the new BluetoothLeScanner API to older platforms\n    implementation 'no.nordicsemi.android.support.v18:scanner:1.4.3'\n    //implementation project(\":scanner\")\n    // Log Bluetooth LE events in nRF Logger\n    implementation 'no.nordicsemi.android:log:2.2.0'\n    // BLE library\n    implementation 'no.nordicsemi.android:ble-livedata:2.2.0'\n    implementation 'no.nordicsemi.android:ble-common:2.2.0'\n\n    // add the Firebase SDK for Google Analytics\n    implementation 'com.google.firebase:firebase-analytics:17.5.0'\n    implementation 'com.google.firebase:firebase-crashlytics:17.2.1'\n\n    def room_version = \"2.2.5\"\n    implementation \"androidx.room:room-runtime:$room_version\"\n    kapt \"androidx.room:room-compiler:$room_version\" // For Kotlin use kapt instead of annotationProcessor\n    // optional - Kotlin Extensions and Coroutines support for Room\n    implementation \"androidx.room:room-ktx:$room_version\"\n    // optional - RxJava support for Room\n    implementation \"androidx.room:room-rxjava2:$room_version\"\n\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation 'androidx.navigation:navigation-fragment:2.3.0'\n    implementation 'androidx.navigation:navigation-ui:2.3.0'\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.0'\n    implementation 'androidx.navigation:navigation-ui-ktx:2.3.0'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 819113bbbbdf9df303ccad1ebf589fb5425a62e5)
+++ app/build.gradle	(date 1607964270000)
@@ -53,6 +53,30 @@
 }
 
 dependencies {
+
+
+    // Import the Firebase BoM
+    implementation platform('com.google.firebase:firebase-bom:26.1.1')
+
+    // When using the BoM, you don't specify versions in Firebase library dependencies
+
+    // Declare the dependency for the Firebase SDK for Google Analytics
+    implementation 'com.google.firebase:firebase-analytics-ktx'
+
+    // Declare the dependencies for any other desired Firebase products
+    // For example, declare the dependencies for Firebase Authentication and Cloud Firestore
+    implementation 'com.google.firebase:firebase-auth-ktx'
+    implementation 'com.google.firebase:firebase-firestore-ktx'
+
+
+    implementation 'com.firebaseui:firebase-ui-auth:6.4.0'
+
+
+
+
+
+
+
     implementation fileTree(dir: 'libs', include: ['*.jar'])
     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
     implementation 'androidx.appcompat:appcompat:1.2.0'
@@ -95,3 +119,5 @@
     androidTestImplementation 'androidx.test.ext:junit:1.1.2'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
 }
+
+
